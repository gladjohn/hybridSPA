@{
    ViewBag.Title = "Read Mail";
}

<script type="text/javascript">
    var authCode = "@ViewBag.SpaAuthCode";
    alert(authCode);
</script>
<script type="text/javascript" src="https://alcdn.msauth.net/browser/2.20.0/js/msal-browser.js"></script>

<script type="text/javascript">
    const msalInstance = new msal.PublicClientApplication({
        auth: {
            clientId: "b5c2e510-4a17-4feb-b219-e55aa5b74144",
            redirectUri: "https://localhost:44320/auth/client-redirect",
            authority: "https://login.microsoftonline.com/f645ad92-e38d-4d1a-b510-d1b09a74a8ca"
        }
    })

    function readMail(spaCode) {

        alert(spaCode);
        // Only handle hash when in top frame
        if (window === window.top) {
            msalInstance.handleRedirectPromise()
                .then(result => {
                    if (result) {
                        console.log('MSAL: Returning from login');
                        return result;
                    }

                    const sid = "{{sid}}";
                    const code = spaCode;
                    const preferredUsername = "{{preferredUsername}}";
                    const loginHint = "{{loginHint}}";

                    const scopes = ["mail.read"];
                    const tokenQueryParameters = {
                        dc: "ESTS-PUB-WUS2-AZ1-FD000-TEST1",
                        hybridspa: "true"
                    }

                    const hybridParams = !!(code);
                    console.log(`MSAL: Initiating client-side auth (hybrid: ${hybridParams})`);

                    if (hybridParams) {
                        const timeLabel = "Time for acquireTokenByCode";
                        console.time(timeLabel);
                        console.log('MSAL: acquireTokenByCode hybrid parameters present');

                        return msalInstance.acquireTokenByCode({
                            code,
                            scopes
                        })
                            .then(result => {
                                console.timeEnd(timeLabel);
                                console.log('MSAL: acquireTokenByCode completed successfully', result);
                            })
                            .catch(error => {
                                console.timeEnd(timeLabel);
                                console.timeEnd(error);
                                console.error('MSAL: acquireTokenByCode failed', error);

                                if (error instanceof msal.InteractionRequiredAuthError) {
                                    console.log('MSAL: acquireTokenByCode failed, redirecting')
                                    // Use loginHint from server to ensure same user
                                    return msalInstance.loginRedirect({
                                        loginHint,
                                        scopes
                                    })
                                }
                            });
                    } else {
                        const timeLabel = "Time for ssoSilent";
                        console.time(timeLabel);
                        console.log('MSAL: ssoSilent hybrid parameters not present');

                        return msalInstance.ssoSilent({
                            sid: loginHint ? undefined : sid, // If loginHint claim is provided, dont use sid
                            loginHint: loginHint || preferredUsername, // Prefer loginHint claim over email
                            tokenQueryParameters,
                            scopes
                        })
                            .then(result => {
                                console.timeEnd(timeLabel);
                                console.log('MSAL: ssoSilent completed successfully', result);
                            })
                            .catch((error) => {
                                console.timeEnd(timeLabel);
                                console.error('MSAL: ssoSilent failed', error);

                                if (error instanceof msal.InteractionRequiredAuthError) {
                                    console.log('MSAL: ssoSilent failed, redirecting')
                                    // Use loginHint from server to ensure same user
                                    return msalInstance.loginRedirect({
                                        loginHint,
                                        scopes
                                    })
                                }
                            });
                    }
                })
                .catch(error => {
                    console.error("MSAL: Error returning from redirect", error);
                });
        }
    }

    
</script>
@if (ViewBag.Relogin != "true")
{
    <text>
        <div class="row" style="margin:auto">
            <div id="card-div" class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <div id="profile-div"></div>
                        <br>
                        <br>
                        <button class="btn btn-primary" id="seeProfile" onclick="seeProfile()">See Profile</button>
                        <br>
                        <br>
                        <button class="btn btn-primary" id="readMail" onclick="readMail('@ViewBag.SpaAuthCode')">Read Mail</button>
                    </div>
                </div>
            </div>
            <br>
            <br>
            <div class="col-md-4">
                <div class="list-group" id="list-tab" role="tablist">
                </div>
            </div>
            <div class="col-md-5">
                <div class="tab-content" id="nav-tabContent">
                </div>
            </div>
        </div>
    </text>
}
else
{
    <text>
        <h2>You need to sign in again.</h2>
        <p>
            The app cannot retrieve your mail until you sign in again. Please click @Html.ActionLink("here", "RefreshSession", "Home") to sign in.
        </p>
    </text>


}

<!-- importing bootstrap.js and supporting js libraries -->
<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>

<!-- importing app scripts (load order is important) -->
<script type="text/javascript" src="~/Scripts/hybridSPA.js"></script>
