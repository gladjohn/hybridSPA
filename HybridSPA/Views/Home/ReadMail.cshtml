<script type="text/javascript">
    var authCode = "@ViewBag.SpaAuthCode";
    var account = "@ViewBag.Account";
    var scopes = "@ViewBag.Scopes";
    alert(authCode);
</script>

<script type="text/javascript" src="https://alcdn.msauth.net/browser/2.20.0/js/msal-browser.js"></script>

<script type="text/javascript">

    const msalInstance = new msal.PublicClientApplication({
        auth: {
            clientId: "49fd6351-6e12-49c8-a0fa-bc6a8951dabf",
            redirectUri: "https://localhost:44320/auth/client-redirect",
            authority: "https://login.microsoftonline.com/f645ad92-e38d-4d1a-b510-d1b09a74a8ca"
        }
    })

    // Select DOM elements to work with
    const welcomeDiv = document.getElementById("welcomeMessage");
    const signInButton = document.getElementById("signIn");
    const signOutButton = document.getElementById('signOut');
    const cardDiv = document.getElementById("card-div");
    const mailButton = document.getElementById("readMail");
    const profileButton = document.getElementById("seeProfile");
    const profileDiv = document.getElementById("profile-div");

    // Add here the endpoints for MS Graph API services you would like to use.
    const graphConfig = {
        graphMeEndpoint: "https://graph.microsoft.com/v1.0/me",
        graphMailEndpoint: "https://graph.microsoft.com/v1.0/me/messages"
    };

    function showWelcomeMessage(account) {

        // Reconfiguring DOM elements
        cardDiv.classList.remove('d-none');
        welcomeDiv.innerHTML = `Welcome ${account.name}`;
        signInButton.classList.add('d-none');
        signOutButton.classList.remove('d-none');
    }

    function updateUI(data, endpoint) {
        console.log('Graph API responded at: ' + new Date().toString());
        console.log('Graph API data: ' + data.mail);

        if (endpoint === graphConfig.graphMeEndpoint) {
            profileDiv.innerHTML = '';
            const title = document.createElement('p');
            title.innerHTML = "<strong>Title: </strong>" + data.jobTitle;
            const email = document.createElement('p');
            email.innerHTML = "<strong>Mail: </strong>" + data.mail;
            const phone = document.createElement('p');
            phone.innerHTML = "<strong>Phone: </strong>" + data.businessPhones[0];
            const address = document.createElement('p');
            address.innerHTML = "<strong>Location: </strong>" + data.officeLocation;
            profileDiv.appendChild(title);
            profileDiv.appendChild(email);
            profileDiv.appendChild(phone);
            profileDiv.appendChild(address);

        } else if (endpoint === graphConfig.graphMailEndpoint) {
            if (data.value.length < 1) {
                alert("Your mailbox is empty!")
            } else {
                const tabList = document.getElementById("list-tab");
                tabList.innerHTML = ''; // clear tabList at each readMail call
                const tabContent = document.getElementById("nav-tabContent");

                data.value.map((d, i) => {
                    // Keeping it simple
                    if (i < 10) {
                        const listItem = document.createElement("a");
                        listItem.setAttribute("class", "list-group-item list-group-item-action")
                        listItem.setAttribute("id", "list" + i + "list")
                        listItem.setAttribute("data-toggle", "list")
                        listItem.setAttribute("href", "#list" + i)
                        listItem.setAttribute("role", "tab")
                        listItem.setAttribute("aria-controls", i)
                        listItem.innerHTML = d.subject;
                        tabList.appendChild(listItem)

                        const contentItem = document.createElement("div");
                        contentItem.setAttribute("class", "tab-pane fade")
                        contentItem.setAttribute("id", "list" + i)
                        contentItem.setAttribute("role", "tabpanel")
                        contentItem.setAttribute("aria-labelledby", "list" + i + "list")
                        contentItem.innerHTML = "<strong> from: " + d.from.emailAddress.address + "</strong><br><br>" + d.bodyPreview + "...";
                        tabContent.appendChild(contentItem);
                    }
                });
            }
        }
    }

    // Helper function to call MS Graph API endpoint
    // using authorization bearer token scheme
    function callMSGraph(endpoint, token, callback) {
        const headers = new Headers();
        const bearer = `Bearer ${token}`;
        alert('graph');
        headers.append("Authorization", bearer);

        const options = {
            method: "GET",
            headers: headers
        };

        console.log('request made to Graph API at: ' + new Date().toString());
        alert(endpoint);
        alert(token);

        fetch(endpoint, options)
            .then(response => response.json())
            .then(response => callback(response, endpoint))
            .then(result => {
                console.log('Successfully Fetched Data from Graph API:', result);
            })
            .catch(error => console.log(error))
    }

    ///get Token
    function getTokenPopup(spaCode) {

        alert(spaCode);
        const code = spaCode;
        const scopes = ["mail.read"];
        const tokenQueryParameters = {
            dc: "ESTS-PUB-WUS2-AZ1-FD000-TEST1",
            hybridspa: "true"
        }

        const timeLabel = "Time for acquireTokenByCode";
        console.time(timeLabel);
        console.log('MSAL: acquireTokenByCode hybrid parameters present');

        var authResult = msalInstance.acquireTokenByCode({
            code,
            scopes,
            tokenQueryParameters
        })
        console.log(authResult);

        return authResult

    }

    //Read Email
    function readMail(spaCode) {
        getTokenPopup(spaCode)
            .then(response => {
                alert(response.accessToken);
                callMSGraph(graphConfig.graphMailEndpoint, response.accessToken, updateUI);
            }).catch(error => {
                console.log(error);
            });
    }

    //See Profile
    function seeProfile(spaCode) {
        getTokenPopup(spaCode)
            .then(response => {
                callMSGraph(graphConfig.graphMeEndpoint, response.accessToken, updateUI);
            }).catch(error => {
                console.log(error);
            });
    }

</script>

@{
    ViewBag.Title = "Read Mail";
}

@if (ViewBag.Relogin != "true")
{
    <text>
        <div class="row" style="margin:auto">
            <div id="card-div" class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <div id="profile-div"></div>
                        <br>
                        <br>
                        <button class="btn btn-primary" id="seeProfile" onclick="seeProfile('@ViewBag.SpaAuthCode')">See Profile</button>
                        <br>
                        <br>
                        <button class="btn btn-primary" id="readMail" onclick="readMail('@ViewBag.SpaAuthCode')">Read Mail</button>
                    </div>
                </div>
            </div>
            <br>
            <br>
            <div class="col-md-4">
                <div class="list-group" id="list-tab" role="tablist">
                </div>
            </div>
            <div class="col-md-5">
                <div class="tab-content" id="nav-tabContent">
                </div>
            </div>
        </div>
    </text>
}
else
{
    <text>
        <h2 class="card-title" id="welcomeMessage">Please sign-in to see your profile and read your mails</h2>
        <p>
            The app cannot retrieve your mail until you sign in again. Please click @Html.ActionLink("here", "RefreshSession", "Home") to sign in.
        </p>
    </text>


}

<!-- importing bootstrap.js and supporting js libraries -->
<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>

<!-- importing app scripts (load order is important) -->
@*<script type="text/javascript" src="~/Scripts/hybridSPA.js"></script>*@
